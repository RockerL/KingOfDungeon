// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_client.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Proto {

  #region Messages
  /// <summary>
  ///角色位置
  /// </summary>
  public sealed class role_pos : pb::IMessage {
    private static readonly pb::MessageParser<role_pos> _parser = new pb::MessageParser<role_pos>(() => new role_pos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<role_pos> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色穿着
  /// </summary>
  public sealed class role_outlook : pb::IMessage {
    private static readonly pb::MessageParser<role_outlook> _parser = new pb::MessageParser<role_outlook>(() => new role_outlook());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<role_outlook> Parser { get { return _parser; } }

    /// <summary>Field number for the "weapon" field.</summary>
    public const int WeaponFieldNumber = 1;
    private uint weapon_;
    /// <summary>
    ///拿的武器 = 0空手
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    /// <summary>Field number for the "helm" field.</summary>
    public const int HelmFieldNumber = 2;
    private uint helm_;
    /// <summary>
    ///头盔=0 未戴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Helm {
      get { return helm_; }
      set {
        helm_ = value;
      }
    }

    /// <summary>Field number for the "face" field.</summary>
    public const int FaceFieldNumber = 3;
    private uint face_;
    /// <summary>
    ///表情=0 默认
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    /// <summary>Field number for the "wing" field.</summary>
    public const int WingFieldNumber = 4;
    private uint wing_;
    /// <summary>
    ///翅膀=0 未戴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Wing {
      get { return wing_; }
      set {
        wing_ = value;
      }
    }

    /// <summary>Field number for the "bag" field.</summary>
    public const int BagFieldNumber = 5;
    private uint bag_;
    /// <summary>
    ///背包=0 未戴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bag {
      get { return bag_; }
      set {
        bag_ = value;
      }
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 6;
    private uint suit_;
    /// <summary>
    ///外套=0 未戴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Weapon != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Weapon);
      }
      if (Helm != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Helm);
      }
      if (Face != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Face);
      }
      if (Wing != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Wing);
      }
      if (Bag != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Bag);
      }
      if (Suit != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Suit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Weapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weapon);
      }
      if (Helm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Helm);
      }
      if (Face != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Face);
      }
      if (Wing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Wing);
      }
      if (Bag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bag);
      }
      if (Suit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Suit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Weapon = input.ReadUInt32();
            break;
          }
          case 16: {
            Helm = input.ReadUInt32();
            break;
          }
          case 24: {
            Face = input.ReadUInt32();
            break;
          }
          case 32: {
            Wing = input.ReadUInt32();
            break;
          }
          case 40: {
            Bag = input.ReadUInt32();
            break;
          }
          case 48: {
            Suit = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色基本信息
  /// </summary>
  public sealed class role_base_info : pb::IMessage {
    private static readonly pb::MessageParser<role_base_info> _parser = new pb::MessageParser<role_base_info>(() => new role_base_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<role_base_info> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "life_point" field.</summary>
    public const int LifePointFieldNumber = 3;
    private uint lifePoint_;
    /// <summary>
    ///生命值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LifePoint {
      get { return lifePoint_; }
      set {
        lifePoint_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Proto.role_pos pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "role_angle" field.</summary>
    public const int RoleAngleFieldNumber = 6;
    private uint roleAngle_;
    /// <summary>
    ///方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleAngle {
      get { return roleAngle_; }
      set {
        roleAngle_ = value;
      }
    }

    /// <summary>Field number for the "outlook" field.</summary>
    public const int OutlookFieldNumber = 7;
    private global::Proto.role_outlook outlook_;
    /// <summary>
    ///穿着
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_outlook Outlook {
      get { return outlook_; }
      set {
        outlook_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (LifePoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LifePoint);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
      if (RoleAngle != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RoleAngle);
      }
      if (outlook_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Outlook);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (LifePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LifePoint);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (RoleAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleAngle);
      }
      if (outlook_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outlook);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            LifePoint = input.ReadUInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Proto.role_pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 48: {
            RoleAngle = input.ReadUInt32();
            break;
          }
          case 58: {
            if (outlook_ == null) {
              outlook_ = new global::Proto.role_outlook();
            }
            input.ReadMessage(outlook_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///块信息
  /// </summary>
  public sealed class block_info : pb::IMessage {
    private static readonly pb::MessageParser<block_info> _parser = new pb::MessageParser<block_info>(() => new block_info());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<block_info> Parser { get { return _parser; } }

    /// <summary>Field number for the "BlockType" field.</summary>
    public const int BlockTypeFieldNumber = 1;
    private uint blockType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockType {
      get { return blockType_; }
      set {
        blockType_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 2;
    private uint content_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BlockType);
      }
      if (Content != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockType);
      }
      if (Content != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockType = input.ReadUInt32();
            break;
          }
          case 16: {
            Content = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求让角色进入服务器地图
  /// </summary>
  public sealed class req_enter_gs : pb::IMessage {
    private static readonly pb::MessageParser<req_enter_gs> _parser = new pb::MessageParser<req_enter_gs>(() => new req_enter_gs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<req_enter_gs> Parser { get { return _parser; } }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    ///令牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private string roleId_ = "";
    /// <summary>
    ///要选择的角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleId {
      get { return roleId_; }
      set {
        roleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (RoleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            RoleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步给客户端进入地图的信息
  /// </summary>
  public sealed class rsp_enter_gs : pb::IMessage {
    private static readonly pb::MessageParser<rsp_enter_gs> _parser = new pb::MessageParser<rsp_enter_gs>(() => new rsp_enter_gs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rsp_enter_gs> Parser { get { return _parser; } }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "mainRoleIdx" field.</summary>
    public const int MainRoleIdxFieldNumber = 2;
    private int mainRoleIdx_;
    /// <summary>
    ///控制角色的ID和信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainRoleIdx {
      get { return mainRoleIdx_; }
      set {
        mainRoleIdx_ = value;
      }
    }

    /// <summary>Field number for the "mainRole" field.</summary>
    public const int MainRoleFieldNumber = 3;
    private global::Proto.role_base_info mainRole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_base_info MainRole {
      get { return mainRole_; }
      set {
        mainRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (MainRoleIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MainRoleIdx);
      }
      if (mainRole_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MainRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (MainRoleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainRoleIdx);
      }
      if (mainRole_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainRole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 16: {
            MainRoleIdx = input.ReadInt32();
            break;
          }
          case 26: {
            if (mainRole_ == null) {
              mainRole_ = new global::Proto.role_base_info();
            }
            input.ReadMessage(mainRole_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步新的区块
  /// </summary>
  public sealed class sync_chunk_enter_range : pb::IMessage {
    private static readonly pb::MessageParser<sync_chunk_enter_range> _parser = new pb::MessageParser<sync_chunk_enter_range>(() => new sync_chunk_enter_range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_chunk_enter_range> Parser { get { return _parser; } }

    /// <summary>Field number for the "chunkX" field.</summary>
    public const int ChunkXFieldNumber = 1;
    private int chunkX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkX {
      get { return chunkX_; }
      set {
        chunkX_ = value;
      }
    }

    /// <summary>Field number for the "chunkZ" field.</summary>
    public const int ChunkZFieldNumber = 2;
    private int chunkZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkZ {
      get { return chunkZ_; }
      set {
        chunkZ_ = value;
      }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.block_info> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.block_info.Parser);
    private readonly pbc::RepeatedField<global::Proto.block_info> blocks_ = new pbc::RepeatedField<global::Proto.block_info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.block_info> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChunkX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChunkX);
      }
      if (ChunkZ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkZ);
      }
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChunkX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkX);
      }
      if (ChunkZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkZ);
      }
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChunkX = input.ReadInt32();
            break;
          }
          case 16: {
            ChunkZ = input.ReadInt32();
            break;
          }
          case 26: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class sync_chunk_leave_range : pb::IMessage {
    private static readonly pb::MessageParser<sync_chunk_leave_range> _parser = new pb::MessageParser<sync_chunk_leave_range>(() => new sync_chunk_leave_range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_chunk_leave_range> Parser { get { return _parser; } }

    /// <summary>Field number for the "chunkX" field.</summary>
    public const int ChunkXFieldNumber = 1;
    private int chunkX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkX {
      get { return chunkX_; }
      set {
        chunkX_ = value;
      }
    }

    /// <summary>Field number for the "chunkZ" field.</summary>
    public const int ChunkZFieldNumber = 2;
    private int chunkZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkZ {
      get { return chunkZ_; }
      set {
        chunkZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChunkX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChunkX);
      }
      if (ChunkZ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChunkX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkX);
      }
      if (ChunkZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChunkX = input.ReadInt32();
            break;
          }
          case 16: {
            ChunkZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步某个角色进入同步范围
  /// </summary>
  public sealed class sync_role_enter_range : pb::IMessage {
    private static readonly pb::MessageParser<sync_role_enter_range> _parser = new pb::MessageParser<sync_role_enter_range>(() => new sync_role_enter_range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_role_enter_range> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleIdx" field.</summary>
    public const int RoleIdxFieldNumber = 1;
    private int roleIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleIdx {
      get { return roleIdx_; }
      set {
        roleIdx_ = value;
      }
    }

    /// <summary>Field number for the "roleBaseInfo" field.</summary>
    public const int RoleBaseInfoFieldNumber = 2;
    private global::Proto.role_base_info roleBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_base_info RoleBaseInfo {
      get { return roleBaseInfo_; }
      set {
        roleBaseInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleIdx);
      }
      if (roleBaseInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoleBaseInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleIdx);
      }
      if (roleBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleBaseInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleIdx = input.ReadInt32();
            break;
          }
          case 18: {
            if (roleBaseInfo_ == null) {
              roleBaseInfo_ = new global::Proto.role_base_info();
            }
            input.ReadMessage(roleBaseInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步某个角色离开同步范围
  /// </summary>
  public sealed class sync_role_leave_range : pb::IMessage {
    private static readonly pb::MessageParser<sync_role_leave_range> _parser = new pb::MessageParser<sync_role_leave_range>(() => new sync_role_leave_range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_role_leave_range> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleIdx" field.</summary>
    public const int RoleIdxFieldNumber = 1;
    private int roleIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleIdx {
      get { return roleIdx_; }
      set {
        roleIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求同步位置、方向、动作
  /// </summary>
  public sealed class req_role_action : pb::IMessage {
    private static readonly pb::MessageParser<req_role_action> _parser = new pb::MessageParser<req_role_action>(() => new req_role_action());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<req_role_action> Parser { get { return _parser; } }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Proto.role_pos pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "role_angle" field.</summary>
    public const int RoleAngleFieldNumber = 2;
    private uint roleAngle_;
    /// <summary>
    ///方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleAngle {
      get { return roleAngle_; }
      set {
        roleAngle_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private uint action_;
    /// <summary>
    ///动作表现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (RoleAngle != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoleAngle);
      }
      if (Action != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Action);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (RoleAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleAngle);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Action);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::Proto.role_pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 16: {
            RoleAngle = input.ReadUInt32();
            break;
          }
          case 24: {
            Action = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class sync_role_action : pb::IMessage {
    private static readonly pb::MessageParser<sync_role_action> _parser = new pb::MessageParser<sync_role_action>(() => new sync_role_action());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_role_action> Parser { get { return _parser; } }

    /// <summary>Field number for the "roleIdx" field.</summary>
    public const int RoleIdxFieldNumber = 1;
    private int roleIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleIdx {
      get { return roleIdx_; }
      set {
        roleIdx_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Proto.role_pos pos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.role_pos Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "role_angle" field.</summary>
    public const int RoleAngleFieldNumber = 3;
    private uint roleAngle_;
    /// <summary>
    ///方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoleAngle {
      get { return roleAngle_; }
      set {
        roleAngle_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private uint action_;
    /// <summary>
    ///动作表现
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleIdx);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (RoleAngle != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RoleAngle);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Action);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleIdx);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (RoleAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleAngle);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Action);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleIdx = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Proto.role_pos();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            RoleAngle = input.ReadUInt32();
            break;
          }
          case 32: {
            Action = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求操作块
  /// </summary>
  public sealed class req_op_block : pb::IMessage {
    private static readonly pb::MessageParser<req_op_block> _parser = new pb::MessageParser<req_op_block>(() => new req_op_block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<req_op_block> Parser { get { return _parser; } }

    /// <summary>Field number for the "OpCode" field.</summary>
    public const int OpCodeFieldNumber = 1;
    private int opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "blockX" field.</summary>
    public const int BlockXFieldNumber = 2;
    private int blockX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockX {
      get { return blockX_; }
      set {
        blockX_ = value;
      }
    }

    /// <summary>Field number for the "blockY" field.</summary>
    public const int BlockYFieldNumber = 3;
    private int blockY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockY {
      get { return blockY_; }
      set {
        blockY_ = value;
      }
    }

    /// <summary>Field number for the "blockZ" field.</summary>
    public const int BlockZFieldNumber = 4;
    private int blockZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockZ {
      get { return blockZ_; }
      set {
        blockZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OpCode);
      }
      if (BlockX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockX);
      }
      if (BlockY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockY);
      }
      if (BlockZ != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BlockZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpCode);
      }
      if (BlockX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockX);
      }
      if (BlockY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockY);
      }
      if (BlockZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockZ);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OpCode = input.ReadInt32();
            break;
          }
          case 16: {
            BlockX = input.ReadInt32();
            break;
          }
          case 24: {
            BlockY = input.ReadInt32();
            break;
          }
          case 32: {
            BlockZ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步块信息
  /// </summary>
  public sealed class sync_block : pb::IMessage {
    private static readonly pb::MessageParser<sync_block> _parser = new pb::MessageParser<sync_block>(() => new sync_block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_block> Parser { get { return _parser; } }

    /// <summary>Field number for the "blockX" field.</summary>
    public const int BlockXFieldNumber = 1;
    private int blockX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockX {
      get { return blockX_; }
      set {
        blockX_ = value;
      }
    }

    /// <summary>Field number for the "blockY" field.</summary>
    public const int BlockYFieldNumber = 2;
    private int blockY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockY {
      get { return blockY_; }
      set {
        blockY_ = value;
      }
    }

    /// <summary>Field number for the "blockZ" field.</summary>
    public const int BlockZFieldNumber = 3;
    private int blockZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockZ {
      get { return blockZ_; }
      set {
        blockZ_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 4;
    private global::Proto.block_info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.block_info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockX);
      }
      if (BlockY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockY);
      }
      if (BlockZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockZ);
      }
      if (info_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Info);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockX);
      }
      if (BlockY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockY);
      }
      if (BlockZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockZ);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockX = input.ReadInt32();
            break;
          }
          case 16: {
            BlockY = input.ReadInt32();
            break;
          }
          case 24: {
            BlockZ = input.ReadInt32();
            break;
          }
          case 34: {
            if (info_ == null) {
              info_ = new global::Proto.block_info();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步道具掉落
  /// </summary>
  public sealed class sync_obj_add : pb::IMessage {
    private static readonly pb::MessageParser<sync_obj_add> _parser = new pb::MessageParser<sync_obj_add>(() => new sync_obj_add());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_obj_add> Parser { get { return _parser; } }

    /// <summary>Field number for the "ObjId" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private uint objId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "ObjType" field.</summary>
    public const int ObjTypeFieldNumber = 2;
    private uint objType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjType {
      get { return objType_; }
      set {
        objType_ = value;
      }
    }

    /// <summary>Field number for the "remainTime" field.</summary>
    public const int RemainTimeFieldNumber = 3;
    private uint remainTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 4;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "OwnerRole" field.</summary>
    public const int OwnerRoleFieldNumber = 5;
    private string ownerRole_ = "";
    /// <summary>
    ///归属，如果未空则未归属任何人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerRole {
      get { return ownerRole_; }
      set {
        ownerRole_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ObjId);
      }
      if (ObjType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ObjType);
      }
      if (RemainTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RemainTime);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Count);
      }
      if (OwnerRole.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OwnerRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjId);
      }
      if (ObjType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjType);
      }
      if (RemainTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemainTime);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (OwnerRole.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerRole);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ObjId = input.ReadUInt32();
            break;
          }
          case 16: {
            ObjType = input.ReadUInt32();
            break;
          }
          case 24: {
            RemainTime = input.ReadUInt32();
            break;
          }
          case 32: {
            Count = input.ReadUInt32();
            break;
          }
          case 42: {
            OwnerRole = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生物进入视野
  /// </summary>
  public sealed class sync_creature_enter_range : pb::IMessage {
    private static readonly pb::MessageParser<sync_creature_enter_range> _parser = new pb::MessageParser<sync_creature_enter_range>(() => new sync_creature_enter_range());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<sync_creature_enter_range> Parser { get { return _parser; } }

    /// <summary>Field number for the "creatureIdx" field.</summary>
    public const int CreatureIdxFieldNumber = 1;
    private int creatureIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreatureIdx {
      get { return creatureIdx_; }
      set {
        creatureIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreatureIdx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CreatureIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreatureIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreatureIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreatureIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色更换装备或者挪动背包
  /// </summary>
  public sealed class req_change_item_pos : pb::IMessage {
    private static readonly pb::MessageParser<req_change_item_pos> _parser = new pb::MessageParser<req_change_item_pos>(() => new req_change_item_pos());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<req_change_item_pos> Parser { get { return _parser; } }

    /// <summary>Field number for the "SrcPosType" field.</summary>
    public const int SrcPosTypeFieldNumber = 1;
    private int srcPosType_;
    /// <summary>
    ///原位置类型 0=装备栏 1=背包栏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPosType {
      get { return srcPosType_; }
      set {
        srcPosType_ = value;
      }
    }

    /// <summary>Field number for the "SrcPosIdx" field.</summary>
    public const int SrcPosIdxFieldNumber = 2;
    private int srcPosIdx_;
    /// <summary>
    ///孔所在的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPosIdx {
      get { return srcPosIdx_; }
      set {
        srcPosIdx_ = value;
      }
    }

    /// <summary>Field number for the "DstPosType" field.</summary>
    public const int DstPosTypeFieldNumber = 3;
    private int dstPosType_;
    /// <summary>
    ///目标位置 0=装备栏 1=背包栏
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstPosType {
      get { return dstPosType_; }
      set {
        dstPosType_ = value;
      }
    }

    /// <summary>Field number for the "DstPosIdx" field.</summary>
    public const int DstPosIdxFieldNumber = 4;
    private int dstPosIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DstPosIdx {
      get { return dstPosIdx_; }
      set {
        dstPosIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPosType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPosType);
      }
      if (SrcPosIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SrcPosIdx);
      }
      if (DstPosType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DstPosType);
      }
      if (DstPosIdx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DstPosIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPosType);
      }
      if (SrcPosIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPosIdx);
      }
      if (DstPosType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstPosType);
      }
      if (DstPosIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DstPosIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcPosType = input.ReadInt32();
            break;
          }
          case 16: {
            SrcPosIdx = input.ReadInt32();
            break;
          }
          case 24: {
            DstPosType = input.ReadInt32();
            break;
          }
          case 32: {
            DstPosIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
