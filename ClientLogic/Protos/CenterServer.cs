// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center_server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Proto {

  #region Messages
  /// <summary>
  ///游戏服务器通知中心服务器初始化完成
  /// </summary>
  public sealed class notify_server_inited : pb::IMessage {
    private static readonly pb::MessageParser<notify_server_inited> _parser = new pb::MessageParser<notify_server_inited>(() => new notify_server_inited());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notify_server_inited> Parser { get { return _parser; } }

    /// <summary>Field number for the "loadedMaps" field.</summary>
    public const int LoadedMapsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_loadedMaps_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> loadedMaps_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LoadedMaps {
      get { return loadedMaps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      loadedMaps_.WriteTo(output, _repeated_loadedMaps_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += loadedMaps_.CalculateSize(_repeated_loadedMaps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            loadedMaps_.AddEntriesFrom(input, _repeated_loadedMaps_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///中心服务器通知游戏服务器角色进入地图
  /// </summary>
  public sealed class notify_role_enter : pb::IMessage {
    private static readonly pb::MessageParser<notify_role_enter> _parser = new pb::MessageParser<notify_role_enter>(() => new notify_role_enter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notify_role_enter> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private string roleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleId {
      get { return roleId_; }
      set {
        roleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 3;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (RoleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleId);
      }
      if (MapId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MapId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            RoleId = input.ReadString();
            break;
          }
          case 24: {
            MapId = input.ReadUInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器通知中心服务器角色已经可以进入地图了
  /// </summary>
  public sealed class notify_role_entered_ready : pb::IMessage {
    private static readonly pb::MessageParser<notify_role_entered_ready> _parser = new pb::MessageParser<notify_role_entered_ready>(() => new notify_role_entered_ready());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notify_role_entered_ready> Parser { get { return _parser; } }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 1;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roleId" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private string roleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleId {
      get { return roleId_; }
      set {
        roleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 4;
    private uint mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 5;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_ip" field.</summary>
    public const int ServerIpFieldNumber = 6;
    private string serverIp_ = "";
    /// <summary>
    ///要进入的服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerIp {
      get { return serverIp_; }
      set {
        serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_port" field.</summary>
    public const int ServerPortFieldNumber = 7;
    private string serverPort_ = "";
    /// <summary>
    ///要进入的服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerPort {
      get { return serverPort_; }
      set {
        serverPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RetCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RetCode);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (RoleId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoleId);
      }
      if (MapId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MapId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      if (ServerIp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ServerIp);
      }
      if (ServerPort.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServerPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleId);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (ServerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerIp);
      }
      if (ServerPort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RetCode = input.ReadInt32();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            RoleId = input.ReadString();
            break;
          }
          case 32: {
            MapId = input.ReadUInt32();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
          case 50: {
            ServerIp = input.ReadString();
            break;
          }
          case 58: {
            ServerPort = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
